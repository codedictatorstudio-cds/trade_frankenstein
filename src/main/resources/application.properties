# ====================== Server ======================
spring.application.name=trade-frankenstein
server.port=8080
# Bind locally (since it's your personal bot)
server.address=127.0.0.1
spring.output.ansi.enabled=ALWAYS
# ====================== DataSource ==================
spring.data.mongodb.uri=mongodb://localhost:27017/TFS
#spring.data.mongodb.username=your_username
#spring.data.mongodb.password=your_password
spring.data.mongodb.authentication-database=TFS
# ====================== Logging =====================
logging.pattern.console=%d{HH:mm:ss} %-5level - %msg%n
# ====================== Springdoc / Swagger UI ======
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
# ====================== Timezone (optional) =========
spring.task.scheduling.pool.size=4
spring.task.scheduling.thread-name-prefix=sched-
spring.task.scheduling.shutdown.await-termination=true
spring.task.scheduling.shutdown.await-termination-period=10s
# ====================== Broker Toggles ==============
# Switch when youâre ready for real brokerage:
trade.mode=${TRADE_MODE:sandbox}    
trade.broker=mock
trade.trades.reconcile-ms=45000
trade.symbols.allowed=NIFTY,BANKNIFTY
trade.test-mode.enabled=false
# Expose the actuator bits SBA uses
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=ALWAYS
# =====================================================================================
# Resilience4j — Step 2  (instances tuned for your UpstoxService calls)
# =====================================================================================
# ---------- Retry ----------
resilience4j.retry.instances.upstoxOrders.max-attempts=3
resilience4j.retry.instances.upstoxOrders.wait-duration=300
resilience4j.retry.instances.upstoxOrders.enable-exponential-backoff=true
resilience4j.retry.instances.upstoxOrders.exponential-backoff-multiplier=2
# Common transient exceptions:
resilience4j.retry.instances.upstoxOrders.retry-exceptions=java.io.IOException,java.net.SocketTimeoutException,org.springframework.web.client.ResourceAccessException,org.springframework.web.client.HttpServerErrorException
resilience4j.retry.instances.upstoxData.max-attempts=2
resilience4j.retry.instances.upstoxData.wait-duration=200
resilience4j.retry.instances.upstoxData.enable-exponential-backoff=true
resilience4j.retry.instances.upstoxData.exponential-backoff-multiplier=2
# ---------- CircuitBreaker ----------
resilience4j.circuitbreaker.instances.upstoxOrders.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.upstoxOrders.sliding-window-size=20
resilience4j.circuitbreaker.instances.upstoxOrders.minimum-number-of-calls=10
resilience4j.circuitbreaker.instances.upstoxOrders.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.upstoxOrders.slow-call-duration-threshold=2
resilience4j.circuitbreaker.instances.upstoxOrders.slow-call-rate-threshold=50
resilience4j.circuitbreaker.instances.upstoxOrders.wait-duration-in-open-state=30
resilience4j.circuitbreaker.instances.upstoxOrders.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.upstoxData.sliding-window-type=TIME_BASED
resilience4j.circuitbreaker.instances.upstoxData.sliding-window-size=30
resilience4j.circuitbreaker.instances.upstoxData.minimum-number-of-calls=10
resilience4j.circuitbreaker.instances.upstoxData.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.upstoxData.wait-duration-in-open-state=15
# ---------- RateLimiter ----------
resilience4j.ratelimiter.instances.upstoxOrders.limit-for-period=5
resilience4j.ratelimiter.instances.upstoxOrders.limit-refresh-period=1
resilience4j.ratelimiter.instances.upstoxOrders.timeout-duration=2
resilience4j.ratelimiter.instances.upstoxData.limit-for-period=10
resilience4j.ratelimiter.instances.upstoxData.limit-refresh-period=1
resilience4j.ratelimiter.instances.upstoxData.timeout-duration=1
# ---------- Bulkhead ----------
resilience4j.bulkhead.instances.upstoxOrders.max-concurrent-calls=4
resilience4j.bulkhead.instances.upstoxOrders.max-wait-duration=2
resilience4j.bulkhead.instances.upstoxData.max-concurrent-calls=8
resilience4j.bulkhead.instances.upstoxData.max-wait-duration=1
# ---------- TimeLimiter ----------
resilience4j.timelimiter.instances.upstoxOrders.timeout-duration=3
resilience4j.timelimiter.instances.upstoxData.timeout-duration=2
# =====================================================================================
# Logging (optional, helps during bring-up)
# =====================================================================================
logging.level.com.trade.frankenstein.trader.service.UpstoxService=INFO
logging.level.io.github.resilience4j=INFO
# Toggle to switch between Redis and in-memory implementation
trade.redis.enabled=true
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.timeout=2000
spring.data.redis.client-type=lettuce
# Time-series bootstrap (run once to create collections + indexes)
trade.mongo.timeseries.enabled=true
trade.mongo.timeseries.init=true
# Retention (seconds)
trade.mongo.timeseries.tick-expire-after-seconds=2592000
trade.mongo.timeseries.candle-expire-after-seconds=31536000
# PnL refresh job
trade.pnl.rollup.enabled=true
trade.timezone=Asia/Kolkata
trade.pnl.rollup.intraday-cron=0 0/1 9-15 ? * MON-FRI
trade.pnl.rollup.daily-cron=0 35 15 ? * MON-FRI
# --- ta4j feature flag & defaults ---
trade.ta4j.enabled=true
trade.ta4j.timeframes=5m,15m,1h
# Indicator periods
trade.ta4j.ema.fast=12
trade.ta4j.ema.slow=26
trade.ta4j.adx.period=14
trade.ta4j.atr.period=14
trade.ta4j.donchian.window=20
trade.ta4j.vwap.lookback=30
# --- backtest harness (MVP) ---
trade.backtest.enabled=true
trade.backtest.max-months=3
trade.backtest.max-candles-per-series=100000
trade.backtest.risk.freeRatePct=5.0
# keep the banner quiet
spring.main.banner-mode=off
# Optional: keep noisy logs down in tests
logging.level.root=WARN
logging.level.com.trade.frankenstein=INFO
# Optional: avoid any scheduled jobs firing during tests
spring.task.scheduling.enabled=false
# If your app tries to call external APIs on startup, add your own flags here, e.g.:
# trade.upstox.refresh.enabled=false
spring.main.allow-bean-definition-overriding=true
# ===== TradeFrankenstein — Step 10 (Kafka/Redpanda) =====
# Common
spring.kafka.client-id=${spring.application.name}
# Producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.acks=1
spring.kafka.producer.batch-size=32768
spring.kafka.producer.linger-ms=5
spring.kafka.producer.properties.max.in.flight.requests.per.connection=1
spring.kafka.producer.properties.request.timeout.ms=15000
# Consumer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.group-id=${KAFKA_GROUP_ID:tf-${spring.application.name}}
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.auto-offset-reset=latest
spring.kafka.listener.concurrency=${KAFKA_CONCURRENCY:1}
spring.kafka.listener.ack-mode=MANUAL_IMMEDIATE
# or
kafka.bootstrap-servers=kafka:9092
tf.kafka.bootstrap-servers=localhost:9092
tf.sse.topics=advice,trade,risk,decision,audit,ticks,option_chain
# Spring Kafka (if you use Spring listeners elsewhere)
spring.kafka.bootstrap-servers=${tf.kafka.bootstrap-servers}

trading.risk.per-strategy.ddcap.CROSSOVER=2.5
trading.risk.per-strategy.ddcap.MEAN_REVERSION=1.5
trading.risk.per-strategy.ddcap.MOMENTUM=3.0

risk.ddcap.default=3.0
risk.max.lots.NIFTY=30
risk.max.lots.BANKNIFTY=20
risk.max.delta.NIFTY=5000
risk.max.delta.BANKNIFTY=5000

# Option Chain Accuracy Settings
trade.options.iv.tolerance=0.0001
trade.options.iv.max-iterations=100
trade.options.arbitrage.tolerance=0.01
trade.options.greeks.validation=true
trade.options.cache.ttl=30

# Greeks Calculation Settings
trade.options.greeks.stale-threshold-minutes=5
trade.options.greeks.enable-second-order=true
trade.options.greeks.validation.put-call-parity=true
trade.options.greeks.validation.bounds-check=true

# Volatility Surface Configuration
trade.options.surface.interpolation.method=CUBIC_SPLINE
trade.options.surface.quality.min-points=20
trade.options.surface.quality.min-score=0.5

# Data Validation Settings
trade.options.validation.max-spread-percentage=0.5
trade.options.validation.min-volume=10
trade.options.validation.min-open-interest=100
trade.options.validation.enable-arbitrage-detection=true

# Indian Market Specific Settings
trade.options.indian.trading-hours-per-day=6.25
trade.options.indian.weekend-adjustment=true
trade.options.indian.holiday-calendar=NSE
trade.options.indian.settlement-time=15:30

# Risk-Free Rate Settings (Updated regularly)
trade.options.rbi.repo-rate=0.065
trade.options.rbi.reverse-repo-rate=0.040
trade.options.rate.auto-update=true
trade.options.rate.update-frequency-hours=24

# Performance and Caching
trade.options.parallel.max-threads=8
trade.options.cache.redis.enabled=true
trade.options.cache.redis.ttl-seconds=30
trade.options.calculation.timeout-seconds=10

# Data Quality Thresholds
trade.options.quality.high-threshold=0.8
trade.options.quality.medium-threshold=0.6
trade.options.quality.surface-reliability-min=0.7

# Black-Scholes Model Settings
trade.options.model.default=BLACK_SCHOLES
trade.options.model.fallback=BINOMIAL
trade.options.model.precision=6
trade.options.model.enable-american-adjustment=false

# Monitoring and Alerting
trade.options.monitoring.accuracy-tracking=true
trade.options.monitoring.alert-on-validation-failure=true
trade.options.monitoring.metrics.enabled=true

# Advanced Features (for future implementation)
trade.options.ml.enabled=false
trade.options.ml.model.iv-prediction=false
trade.options.ml.model.anomaly-detection=false
trade.options.stochastic-volatility.enabled=false


